name: cheat
version: 'v3.2.1.build.2'
summary: cheat allows to create and view interactive cheatsheets on the command-line.
description: |
  cheat allows you to create and view interactive cheatsheets on the command-line. 
  It was designed to help remind *nix system administrators of options for commands 
  that they use frequently, but not frequently enough to remember.
  Source comes from https://github.com/cheat
  Bugreports for upstream go to: https://github.com/cheat/cheat/issues
  Bugreports for snap go to: https://github.com/cheat/snap/issues

  To use personal cheatsheets run `cheat.cheatsheet-setup`

grade: stable
confinement: strict
base: core18

layout:
  /bin/vi:
    symlink: $SNAP/bin/vim
  /usr/share/cheat:
    symlink: $SNAP/usr/share/cheat
  /etc/cheat/conf.yml:
    bind-file: $SNAP/etc/cheat/conf.yml

apps:
  cheat:
    environment:
      CHEAT_CONFIG_PATH: "/etc/cheat/conf.yml"
    command: cheat
    plugs: [home]

  cheatsheet-setup:
    command: mkdir -p $SNAP_USER_DATA/cheat

  vi:
    command: vim

  vim:
    command: vim

  nano:
    command: nano

parts:
  cheat:
    plugin: go
    go-importpath: github.com/cheat/cheat
    source: https://github.com/cheat/cheat
    source-type: git
    override-build: |
      export GOPATH=$(realpath ../go)
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/bin/
      cd ${GOPATH}/src/github.com/cheat/cheat
      cd cmd/cheat
      go clean && go generate
      go build -mod vendor -o ${SNAPCRAFT_PART_INSTALL}/bin/cheat .
      
      mkdir -p $SNAPCRAFT_PRIME/usr/share/cheat/cheatsheets
      if [ -d $SNAPCRAFT_PRIME/usr/share/cheat/cheatsheets/community ]; then
        cd $SNAPCRAFT_PRIME/usr/share/cheat/cheatsheets/community
        git fetch
        git pull
      else
        git clone https://github.com/cheat/cheatsheets $SNAPCRAFT_PRIME/usr/share/cheat/cheatsheets/community
      fi

      mkdir -p $SNAPCRAFT_PRIME/etc/cheat/
      cat << EOF > $SNAPCRAFT_PRIME/etc/cheat/conf.yml
      # Should 'cheat' always colorize output?
      colorize: true

      # Which 'chroma' colorscheme should be applied to the output?
      # Options are available here:
      #   https://github.com/alecthomas/chroma/tree/master/styles
      style: monokai

      # Which 'chroma' "formatter" should be applied?
      # One of: "terminal", "terminal256", "terminal16m"
      formatter: terminal16m

      cheatpaths:
      # Paths that come earlier are considered to be the most "global", and will
      # thus be overridden by more local cheatsheets. That being the case, you
      # should probably list community cheatsheets first.
      #
      # Note that the paths and tags listed below are just examples. You may freely
      # change them to suit your needs.
        - name: community
          path: /usr/share/cheat/cheatsheets/community
          tags: [ community ]
          readonly: true
      # If you have personalized cheatsheets, list them last. They will take
      # precedence over the more global cheatsheets.
        - name: personal
          path: ~/cheat
          tags: [ personal ]
          readonly: false
      EOF

  vim:
    source: https://github.com/vim/vim.git
    source-depth: 1
    plugin: make
    override-build: |
      cd src
      ./configure --prefix=$SNAPCRAFT_PART_INSTALL
      make
      make install

  nano:
    source: https://www.nano-editor.org/dist/latest/nano-4.6.tar.gz
    source-type: tar
    plugin: make
    override-build: |
      ./configure --prefix=$SNAPCRAFT_PART_INSTALL
      make
      make install
    override-prime: |
      snapcraftctl prime
    build-packages:
      - gcc
      - libncurses5-dev
